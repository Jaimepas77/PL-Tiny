
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package implementacion.c_ast_ascendente;

import java_cup.runtime.*;
import implementacion.abstractSintax.SintaxisAbstracta;
import implementacion.abstractSintax.SintaxisAbstracta.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConstructorAST extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\006\006\000\002\006\007\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\010\000\002\011\005\000\002\011\004" +
    "\000\002\012\004\000\002\012\003\000\002\014\006\000" +
    "\002\015\005\000\002\016\003\000\002\016\002\000\002" +
    "\017\005\000\002\017\003\000\002\020\006\000\002\020" +
    "\005\000\002\023\005\000\002\024\004\000\002\024\002" +
    "\000\002\025\006\000\002\025\010\000\002\025\012\000" +
    "\002\025\010\000\002\025\005\000\002\025\005\000\002" +
    "\025\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\007\000\002\025\006\000\002\055\003\000\002\055\002" +
    "\000\002\041\003\000\002\041\002\000\002\042\005\000" +
    "\002\042\003\000\002\043\005\000\002\043\003\000\002" +
    "\044\005\000\002\044\005\000\002\044\003\000\002\045" +
    "\005\000\002\045\005\000\002\045\003\000\002\046\005" +
    "\000\002\046\003\000\002\047\004\000\002\047\003\000" +
    "\002\050\006\000\002\050\005\000\002\050\004\000\002" +
    "\050\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\005\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\012\043\ufffe\052\ufffe\064\ufffe\065\ufffe\001" +
    "\002\000\004\002\241\001\002\000\012\043\014\052\016" +
    "\064\013\065\015\001\002\000\004\021\ufffc\001\002\000" +
    "\012\043\uffff\052\uffff\064\uffff\065\uffff\001\002\000\004" +
    "\021\ufffa\001\002\000\004\021\240\001\002\000\004\021" +
    "\ufffb\001\002\000\004\066\235\001\002\000\004\066\213" +
    "\001\002\000\004\066\162\001\002\000\050\005\uffe2\017" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\047\uffe2" +
    "\051\uffe2\053\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\001\002\000\004" +
    "\025\020\001\002\000\004\002\001\001\002\000\050\005" +
    "\055\017\025\037\027\040\052\041\031\042\045\044\033" +
    "\047\023\051\044\053\030\057\047\060\051\061\022\062" +
    "\040\063\054\066\036\067\053\070\050\071\024\001\002" +
    "\000\026\005\055\017\025\037\027\040\052\041\031\042" +
    "\045\066\036\067\053\070\050\071\024\001\002\000\026" +
    "\005\055\017\025\037\027\040\052\041\031\042\045\066" +
    "\036\067\053\070\050\071\024\001\002\000\062\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\035" +
    "\uffbc\036\uffbc\045\uffbc\050\uffbc\001\002\000\026\005\055" +
    "\017\025\037\027\040\052\041\031\042\045\066\036\067" +
    "\053\070\050\071\024\001\002\000\062\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\035\uffc1\036" +
    "\uffc1\045\uffc1\050\uffc1\001\002\000\026\005\uffae\017\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\001\002\000\056\005\uffe4\017\uffe4\021\uffe4" +
    "\025\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\046" +
    "\uffe4\047\uffe4\051\uffe4\053\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\001" +
    "\002\000\062\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\035\uffbe\036\uffbe\045\uffbe\050\uffbe\001" +
    "\002\000\062\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\145\024\uffc5\025\143" +
    "\026\144\027\uffc5\035\uffc5\036\uffc5\045\uffc5\050\uffc5\001" +
    "\002\000\026\005\055\017\025\037\027\040\052\041\031" +
    "\042\045\066\036\067\053\070\050\071\024\001\002\000" +
    "\054\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\024\uffc7\027\uffc7\035\uffc7\036\uffc7" +
    "\045\uffc7\050\uffc7\001\002\000\052\005\uffe3\017\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\046\uffe3\047\uffe3" +
    "\051\uffe3\053\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\001\002\000\062" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\035\uffbb\036\uffbb\045\uffbb\050\uffbb\001\002\000\054" +
    "\004\uffc9\005\uffc9\006\123\007\124\010\122\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\024\uffc9\027\uffc9\035\121\036\125\045" +
    "\uffc9\050\uffc9\001\002\000\026\005\055\017\025\037\027" +
    "\040\052\041\031\042\045\066\036\067\053\070\050\071" +
    "\024\001\002\000\042\004\115\005\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\024\uffcc\027\uffcc\045\uffcc\050\uffcc\001\002" +
    "\000\040\005\103\011\105\012\107\013\110\014\111\015" +
    "\104\016\112\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf" +
    "\027\uffcf\045\uffcf\050\uffcf\001\002\000\006\017\070\022" +
    "\071\001\002\000\012\043\ufffe\052\ufffe\064\ufffe\065\ufffe" +
    "\001\002\000\062\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\035\uffbd\036\uffbd\045\uffbd\050\uffbd" +
    "\001\002\000\026\005\055\017\025\037\027\040\052\041" +
    "\031\042\045\066\036\067\053\070\050\071\024\001\002" +
    "\000\026\005\055\017\025\037\027\040\052\041\031\042" +
    "\045\066\036\067\053\070\050\071\024\001\002\000\062" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\035\uffbf\036\uffbf\045\uffbf\050\uffbf\001\002\000\026" +
    "\005\055\017\025\037\027\040\052\041\031\042\045\066" +
    "\036\067\053\070\050\071\024\001\002\000\062\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\035" +
    "\uffba\036\uffba\045\uffba\050\uffba\001\002\000\062\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\035" +
    "\uffc0\036\uffc0\045\uffc0\050\uffc0\001\002\000\004\021\056" +
    "\001\002\000\026\005\uffaf\017\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\001\002" +
    "\000\052\005\uffdb\017\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\044\uffdb\046\uffdb\047\uffdb\051\uffdb\053\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\071\uffdb\001\002\000\004\021\060\001\002\000\052" +
    "\005\uffd9\017\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\053\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\066\uffd9\067\uffd9\070\uffd9\071" +
    "\uffd9\001\002\000\004\021\062\001\002\000\052\005\uffda" +
    "\017\uffda\037\uffda\040\uffda\041\uffda\042\uffda\044\uffda\046" +
    "\uffda\047\uffda\051\uffda\053\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\066\uffda\067\uffda\070\uffda\071\uffda\001" +
    "\002\000\054\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\027\uffc6\035\uffc6" +
    "\036\uffc6\045\uffc6\050\uffc6\001\002\000\012\043\014\052" +
    "\016\064\013\065\015\001\002\000\054\005\uffd5\017\uffd5" +
    "\021\067\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\053\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\001" +
    "\002\000\052\005\uffd7\017\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\044\uffd7\046\uffd7\047\uffd7\051\uffd7\053\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\001\002\000\052\005\uffd6\017\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\046\uffd6\047\uffd6" +
    "\051\uffd6\053\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\001\002\000\030" +
    "\005\055\017\025\020\uffd3\037\027\040\052\041\031\042" +
    "\045\066\036\067\053\070\050\071\024\001\002\000\026" +
    "\005\055\017\025\037\027\040\052\041\031\042\045\066" +
    "\036\067\053\070\050\071\024\001\002\000\004\021\073" +
    "\001\002\000\052\005\uffe1\017\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\044\uffe1\046\uffe1\047\uffe1\051\uffe1\053\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\001\002\000\006\020\uffd1\027\uffd1" +
    "\001\002\000\006\020\uffd4\027\101\001\002\000\004\020" +
    "\077\001\002\000\004\021\100\001\002\000\052\005\uffd8" +
    "\017\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\046" +
    "\uffd8\047\uffd8\051\uffd8\053\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\001" +
    "\002\000\026\005\055\017\025\037\027\040\052\041\031" +
    "\042\045\066\036\067\053\070\050\071\024\001\002\000" +
    "\006\020\uffd2\027\uffd2\001\002\000\026\005\055\017\025" +
    "\037\027\040\052\041\031\042\045\066\036\067\053\070" +
    "\050\071\024\001\002\000\026\005\uffb3\017\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\001\002\000\026\005\uffb8\017\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\001" +
    "\002\000\026\005\055\017\025\037\027\040\052\041\031" +
    "\042\045\066\036\067\053\070\050\071\024\001\002\000" +
    "\026\005\uffb7\017\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\071\uffb7\001\002\000\026\005" +
    "\uffb6\017\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\001\002\000\026\005\uffb5\017" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\001\002\000\026\005\uffb4\017\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\001\002\000\024\005\103\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\024\uffd0\027\uffd0\045\uffd0\050\uffd0\001\002" +
    "\000\040\005\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd" +
    "\027\uffcd\045\uffcd\050\uffcd\001\002\000\026\005\055\017" +
    "\025\037\027\040\052\041\031\042\045\066\036\067\053" +
    "\070\050\071\024\001\002\000\040\005\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\024\uffce\027\uffce\045\uffce\050\uffce\001" +
    "\002\000\004\021\120\001\002\000\052\005\uffdc\017\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\046\uffdc\047" +
    "\uffdc\051\uffdc\053\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\001\002\000" +
    "\026\005\055\017\025\037\027\040\052\041\031\042\045" +
    "\066\036\067\053\070\050\071\024\001\002\000\026\005" +
    "\uffb0\017\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\001\002\000\026\005\uffb2\017" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\001\002\000\026\005\uffb1\017\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\001\002\000\026\005\055\017\025\037\027\040" +
    "\052\041\031\042\045\066\036\067\053\070\050\071\024" +
    "\001\002\000\026\005\055\017\025\037\027\040\052\041" +
    "\031\042\045\066\036\067\053\070\050\071\024\001\002" +
    "\000\054\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\024\uffc8\027\uffc8\035\uffc8\036" +
    "\uffc8\045\uffc8\050\uffc8\001\002\000\042\004\uffca\005\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\024\uffca\027\uffca\045\uffca" +
    "\050\uffca\001\002\000\050\004\uffcb\005\uffcb\006\123\007" +
    "\124\010\122\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\027" +
    "\uffcb\045\uffcb\050\uffcb\001\002\000\004\045\133\001\002" +
    "\000\052\005\uffe2\017\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\044\uffe2\046\uffe2\047\uffe2\051\uffe2\053\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\001\002\000\052\005\055\017\025\037\027" +
    "\040\052\041\031\042\045\044\033\046\135\047\023\051" +
    "\044\053\136\057\047\060\051\061\022\062\040\063\054" +
    "\066\036\067\053\070\050\071\024\001\002\000\050\005" +
    "\uffe2\017\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2" +
    "\047\uffe2\051\uffe2\053\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\001\002" +
    "\000\054\005\uffd5\017\uffd5\021\067\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\044\uffd5\046\uffd5\047\uffd5\051\uffd5\053\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\001\002\000\052\005\uffe0\017\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\051\uffe0\053\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\001\002\000" +
    "\050\005\055\017\025\037\027\040\052\041\031\042\045" +
    "\044\033\047\023\051\044\053\141\057\047\060\051\061" +
    "\022\062\040\063\054\066\036\067\053\070\050\071\024" +
    "\001\002\000\054\005\uffd5\017\uffd5\021\067\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\044\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\053\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\001\002\000\052\005\uffdf" +
    "\017\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\046" +
    "\uffdf\047\uffdf\051\uffdf\053\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\001" +
    "\002\000\004\066\150\001\002\000\062\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\035\uffc2\036" +
    "\uffc2\045\uffc2\050\uffc2\001\002\000\026\005\055\017\025" +
    "\037\027\040\052\041\031\042\045\066\036\067\053\070" +
    "\050\071\024\001\002\000\004\024\147\001\002\000\062" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\035\uffc4\036\uffc4\045\uffc4\050\uffc4\001\002\000\062" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\035\uffc3\036\uffc3\045\uffc3\050\uffc3\001\002\000\004" +
    "\020\152\001\002\000\062\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\035\uffb9\036\uffb9\045\uffb9" +
    "\050\uffb9\001\002\000\004\050\154\001\002\000\050\005" +
    "\uffe2\017\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2" +
    "\047\uffe2\051\uffe2\053\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\001\002" +
    "\000\050\005\055\017\025\037\027\040\052\041\031\042" +
    "\045\044\033\047\023\051\044\053\156\057\047\060\051" +
    "\061\022\062\040\063\054\066\036\067\053\070\050\071" +
    "\024\001\002\000\054\005\uffd5\017\uffd5\021\067\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\044\uffd5\046\uffd5\047\uffd5\051" +
    "\uffd5\053\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\066\uffd5\067\uffd5\070\uffd5\071\uffd5\001\002\000\052\005" +
    "\uffde\017\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044\uffde" +
    "\046\uffde\047\uffde\051\uffde\053\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\066\uffde\067\uffde\070\uffde\071\uffde" +
    "\001\002\000\004\021\161\001\002\000\052\005\uffdd\017" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\046\uffdd" +
    "\047\uffdd\051\uffdd\053\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\001\002" +
    "\000\004\030\163\001\002\000\022\026\174\031\164\032" +
    "\173\033\166\034\171\054\170\055\167\066\172\001\002" +
    "\000\010\020\ufff6\021\ufff6\027\ufff6\001\002\000\004\021" +
    "\ufff8\001\002\000\010\020\ufff4\021\ufff4\027\ufff4\001\002" +
    "\000\004\023\206\001\002\000\004\066\176\001\002\000" +
    "\010\020\ufff3\021\ufff3\027\ufff3\001\002\000\010\020\ufff2" +
    "\021\ufff2\027\ufff2\001\002\000\010\020\ufff5\021\ufff5\027" +
    "\ufff5\001\002\000\022\026\174\031\164\032\173\033\166" +
    "\034\171\054\170\055\167\066\172\001\002\000\010\020" +
    "\uffef\021\uffef\027\uffef\001\002\000\004\030\203\001\002" +
    "\000\004\053\202\001\002\000\004\053\uffed\001\002\000" +
    "\004\053\uffee\001\002\000\010\020\ufff0\021\ufff0\027\ufff0" +
    "\001\002\000\022\026\174\031\164\032\173\033\166\034" +
    "\171\054\170\055\167\066\172\001\002\000\004\021\205" +
    "\001\002\000\004\053\uffec\001\002\000\004\067\207\001" +
    "\002\000\004\024\210\001\002\000\004\056\211\001\002" +
    "\000\022\026\174\031\164\032\173\033\166\034\171\054" +
    "\170\055\167\066\172\001\002\000\010\020\ufff1\021\ufff1" +
    "\027\ufff1\001\002\000\004\017\214\001\002\000\010\020" +
    "\uffe9\064\221\066\220\001\002\000\012\043\ufffe\052\ufffe" +
    "\064\ufffe\065\ufffe\001\002\000\012\043\014\052\016\064" +
    "\013\065\015\001\002\000\004\021\ufff7\001\002\000\004" +
    "\030\233\001\002\000\004\066\230\001\002\000\004\020" +
    "\227\001\002\000\006\020\uffea\027\225\001\002\000\006" +
    "\020\uffe7\027\uffe7\001\002\000\006\064\221\066\220\001" +
    "\002\000\006\020\uffe8\027\uffe8\001\002\000\012\043\uffeb" +
    "\052\uffeb\064\uffeb\065\uffeb\001\002\000\004\030\231\001" +
    "\002\000\022\026\174\031\164\032\173\033\166\034\171" +
    "\054\170\055\167\066\172\001\002\000\006\020\uffe6\027" +
    "\uffe6\001\002\000\022\026\174\031\164\032\173\033\166" +
    "\034\171\054\170\055\167\066\172\001\002\000\006\020" +
    "\uffe5\027\uffe5\001\002\000\004\030\236\001\002\000\022" +
    "\026\174\031\164\032\173\033\166\034\171\054\170\055" +
    "\167\066\172\001\002\000\004\021\ufff9\001\002\000\012" +
    "\043\ufffd\052\ufffd\064\ufffd\065\ufffd\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\016\004\006\005\010\006\005\007\011\010\007" +
    "\023\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\025\034\043\042\044\041\045\040\046\036\047\033\050" +
    "\031\051\025\054\045\001\001\000\022\043\157\044\041" +
    "\045\040\046\036\047\033\050\031\051\025\054\045\001" +
    "\001\000\022\043\152\044\041\045\040\046\036\047\033" +
    "\050\031\051\025\054\045\001\001\000\002\001\001\000" +
    "\022\043\150\044\041\045\040\046\036\047\033\050\031" +
    "\051\025\054\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\043\131\044\041\045\040\046\036\047\033\050" +
    "\031\051\025\054\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\125\001\001\000" +
    "\022\043\116\044\041\045\040\046\036\047\033\050\031" +
    "\051\025\054\045\001\001\000\002\001\001\000\004\052" +
    "\105\001\001\000\002\001\001\000\004\003\063\001\001" +
    "\000\002\001\001\000\012\047\062\050\031\051\025\054" +
    "\045\001\001\000\022\043\060\044\041\045\040\046\036" +
    "\047\033\050\031\051\025\054\045\001\001\000\002\001" +
    "\001\000\022\043\056\044\041\045\040\046\036\047\033" +
    "\050\031\051\025\054\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\006" +
    "\005\010\006\005\007\011\010\007\023\064\001\001\000" +
    "\004\055\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\041\075\042\074\043\073\044\041\045\040\046" +
    "\036\047\033\050\031\051\025\054\045\001\001\000\022" +
    "\043\071\044\041\045\040\046\036\047\033\050\031\051" +
    "\025\054\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\043\101\044\041" +
    "\045\040\046\036\047\033\050\031\051\025\054\045\001" +
    "\001\000\002\001\001\000\016\045\113\046\036\047\033" +
    "\050\031\051\025\054\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\044\112\045\040\046\036\047\033" +
    "\050\031\051\025\054\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\045\115\046\036\047" +
    "\033\050\031\051\025\054\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\046\130\047" +
    "\033\050\031\051\025\054\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\045\127\046" +
    "\036\047\033\050\031\051\025\054\045\001\001\000\012" +
    "\047\126\050\031\051\025\054\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\125\001\001\000\002" +
    "\001\001\000\004\024\133\001\001\000\024\025\034\043" +
    "\042\044\041\045\040\046\036\047\033\050\031\051\025" +
    "\054\045\001\001\000\004\024\137\001\001\000\004\055" +
    "\136\001\001\000\002\001\001\000\024\025\034\043\042" +
    "\044\041\045\040\046\036\047\033\050\031\051\025\054" +
    "\045\001\001\000\004\055\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\043\145\044" +
    "\041\045\040\046\036\047\033\050\031\051\025\054\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\154\001\001\000\024\025\034\043\042\044" +
    "\041\045\040\046\036\047\033\050\031\051\025\054\045" +
    "\001\001\000\004\055\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\176\014\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\211\001\001" +
    "\000\002\001\001\000\004\015\214\001\001\000\010\016" +
    "\221\017\222\020\223\001\001\000\004\003\215\001\001" +
    "\000\016\004\006\005\010\006\005\007\011\010\007\023" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\231\001\001\000" +
    "\002\001\001\000\004\011\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLex alex = (AnalizadorLex)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConstructorAST$actions {


	private SintaxisAbstracta sa = new SintaxisAbstracta();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= SDecs SIns PUNTO 
            {
              Prog RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		LIns ins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cProg_(decs, ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SDecs ::= SDecs DecT 
            {
              LDecs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cMuchas_Decs(decs, dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SDecs",1, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SDecs ::= 
            {
              LDecs RESULT =null;
		 RESULT = sa.cSin_Decs(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SDecs",1, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DecT ::= Dec PUNTOCOMA 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = dec; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DecT",2, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Dec ::= DecVar 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= DecTipo 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= DecProc 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DecVar ::= VAR ID DOSPUNTOS Tipo 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cDec_Var(id.toLowerCase(), t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DecVar",4, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DecVar ::= TYPE ID DOSPUNTOS Tipo 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cDec_Tipo(id.toLowerCase(), t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DecVar",4, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DecVar ::= PROC ID ParamsF SDecs SIns 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LParams p = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		LDecs d = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		LIns i = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cDec_Proc(id.toLowerCase(), p, d, i); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DecVar",4, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sa.cInt_(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sa.cReal_(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sa.cBool_(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sa.cString_(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= ID 
            {
              Tipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cRef_(i.toLowerCase()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= ARRAY CAPERTURA LENTERO CCIERRE OF Tipo 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cArray_(e, t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= RECORD Campos END 
            {
              Tipo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Campos cs = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cRecord_(cs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= CIRCUNFLEJO Tipo 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cPuntero_(t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Campos ::= Campos CampoT 
            {
              Campos RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Campos cs = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cMuchos_Campos(cs, c); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",8, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Campos ::= Campo 
            {
              Campos RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cUn_Campo(c); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",8, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Campo ::= ID DOSPUNTOS Tipo PUNTOCOMA 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cCampo(id.toLowerCase(), t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campo",10, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ParamsF ::= PAPERTURA LParams PCIERRE 
            {
              LParams RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		LParams params = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = params; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamsF",11, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LParams ::= LParamsAux 
            {
              LParams RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		LParams params = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = params; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParams",12, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LParams ::= 
            {
              LParams RESULT =null;
		 RESULT = sa.cSin_Params(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParams",12, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LParamsAux ::= LParamsAux COMA ParamF 
            {
              LParams RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LParams params = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cMuchos_Params(params, p); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParamsAux",13, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LParamsAux ::= ParamF 
            {
              LParams RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cUn_Param(p); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParamsAux",13, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamF ::= VAR ID DOSPUNTOS Tipo 
            {
              Param RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cParam_Ref(id.toLowerCase(), t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamF",14, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamF ::= ID DOSPUNTOS Tipo 
            {
              Param RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cParam_Val(id.toLowerCase(), t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamF",14, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIns ::= BEGIN LIns END 
            {
              LIns RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		LIns ins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = ins; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SIns",17, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LIns ::= LIns Ins 
            {
              LIns RESULT =null;
		int linsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int linsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		LIns lins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Ins i = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cMuchas_Ins(lins, i); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LIns",18, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIns ::= 
            {
              LIns RESULT =null;
		 RESULT = sa.cSin_Ins(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LIns",18, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ins ::= E IGUAL E PUNTOCOMA 
            {
              Ins RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cAsignacion_(e1, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ins ::= IF E THEN LIns END TO 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LIns ins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sa.cIf_Then(e, ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ins ::= IF E THEN LIns ELSE LIns END TO 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).right;
		LIns ins1 = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LIns ins2 = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sa.cIf_Then_Else(e, ins1, ins2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-7)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ins ::= WHILE E DO LIns END TO 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LIns ins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sa.cWhile_(e, ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ins ::= READ E PUNTOCOMA 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cRead_(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ins ::= WRITE E PUNTOCOMA 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cWrite_(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ins ::= NL PUNTOCOMA 
            {
              Ins RESULT =null;
		 RESULT = sa.cNl_(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ins ::= NEW E PUNTOCOMA 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cNew_(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ins ::= DELETE E PUNTOCOMA 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cDelete_(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ins ::= E PAPERTURA LExp PCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LExp params = (LExp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sa.cCall_Proc(e, params); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ins ::= SEQ SDecs SIns TO 
            {
              Ins RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		LIns ins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cIns_Compuesta(decs, ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",19, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TO ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TO",43, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TO ::= 
            {
              Object RESULT =null;

              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TO",43, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LExp ::= LExpAux 
            {
              LExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		LExp l = (LExp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = l; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LExp",31, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LExp ::= 
            {
              LExp RESULT =null;
		 RESULT = sa.cSin_Expr(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LExp",31, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LExpAux ::= LExpAux COMA E 
            {
              LExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		LExp l = (LExp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cMuchas_Expr(l, e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LExpAux",32, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LExpAux ::= E 
            {
              LExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cUna_Expr(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LExpAux",32, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E1 OpRel E1 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cExpBin(e1, c, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E1 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E2 SUMA E2 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cSuma(e1, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",34, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E1 ::= E1 RESTA E2 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cResta(e1, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",34, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E1 ::= E2 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",34, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= E3 AND E3 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cAnd(e1, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",35, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E2 ::= E3 OR E2 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cOr(e1, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",35, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E2 ::= E3 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",35, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E3 ::= E3 Op3 E4 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cExpBin(e1, c, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",36, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E3 ::= E4 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",36, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= Op4 E4 
            {
              E RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cExpUnPref(c, e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",37, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E4 ::= E5 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",37, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E5 CAPERTURA E CCIERRE 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cIndex(e1, e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",38, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= E5 PUNTO ID 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cAccess(e, id.toLowerCase()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",38, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E5 ::= E5 CIRCUNFLEJO 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sa.cIndir(e); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",38, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E5 ::= EBasic 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",38, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EBasic ::= LENTERO 
            {
              E RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cInt(s); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EBasic ::= LREAL 
            {
              E RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cReal(s); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EBasic ::= TRUE 
            {
              E RESULT =null;
		 RESULT = sa.cTrue(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EBasic ::= FALSE 
            {
              E RESULT =null;
		 RESULT = sa.cFalse(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EBasic ::= LCADENA 
            {
              E RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cCadena(s); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EBasic ::= ID 
            {
              E RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cId(s.toLowerCase()); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EBasic ::= NULL 
            {
              E RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sa.cNull(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EBasic ::= PAPERTURA E PCIERRE 
            {
              E RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).right;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = e; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EBasic",39, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpRel ::= BLT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpRel",40, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpRel ::= BGT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpRel",40, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpRel ::= BLE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpRel",40, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpRel ::= BGE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpRel",40, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpRel ::= BNE 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpRel",40, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OpRel ::= BEQ 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpRel",40, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Op3 ::= MULTIPLICA 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",41, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Op3 ::= DIVIDE 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",41, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Op3 ::= MODULO 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",41, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Op4 ::= RESTA 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op4",42, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Op4 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op4",42, ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorAST$stack.peek()), RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

}
