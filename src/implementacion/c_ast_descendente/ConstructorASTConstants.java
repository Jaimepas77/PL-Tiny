/* Generated By:JavaCC: Do not edit this line. ConstructorASTConstants.java */
package c_ast_descendente;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ConstructorASTConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Letra = 1;
  /** RegularExpression Id. */
  int Dig = 2;
  /** RegularExpression Id. */
  int DigPos = 3;
  /** RegularExpression Id. */
  int PEntera = 4;
  /** RegularExpression Id. */
  int PDecimal = 5;
  /** RegularExpression Id. */
  int PExp = 6;
  /** RegularExpression Id. */
  int Id = 7;
  /** RegularExpression Id. */
  int LEntero = 8;
  /** RegularExpression Id. */
  int LReal = 9;
  /** RegularExpression Id. */
  int LCadena = 10;
  /** RegularExpression Id. */
  int Suma = 11;
  /** RegularExpression Id. */
  int Resta = 12;
  /** RegularExpression Id. */
  int Multiplica = 13;
  /** RegularExpression Id. */
  int Divide = 14;
  /** RegularExpression Id. */
  int Modulo = 15;
  /** RegularExpression Id. */
  int BLT = 16;
  /** RegularExpression Id. */
  int BGT = 17;
  /** RegularExpression Id. */
  int BLE = 18;
  /** RegularExpression Id. */
  int BGE = 19;
  /** RegularExpression Id. */
  int BEQ = 20;
  /** RegularExpression Id. */
  int BNE = 21;
  /** RegularExpression Id. */
  int PApertura = 22;
  /** RegularExpression Id. */
  int PCierre = 23;
  /** RegularExpression Id. */
  int PuntoComa = 24;
  /** RegularExpression Id. */
  int Igual = 25;
  /** RegularExpression Id. */
  int CApertura = 26;
  /** RegularExpression Id. */
  int CCierre = 27;
  /** RegularExpression Id. */
  int Punto = 28;
  /** RegularExpression Id. */
  int Circunflejo = 29;
  /** RegularExpression Id. */
  int Coma = 30;
  /** RegularExpression Id. */
  int DosPuntos = 31;
  /** RegularExpression Id. */
  int Int = 32;
  /** RegularExpression Id. */
  int Real = 33;
  /** RegularExpression Id. */
  int Bool = 34;
  /** RegularExpression Id. */
  int String = 35;
  /** RegularExpression Id. */
  int And = 36;
  /** RegularExpression Id. */
  int Or = 37;
  /** RegularExpression Id. */
  int Not = 38;
  /** RegularExpression Id. */
  int Null = 39;
  /** RegularExpression Id. */
  int True = 40;
  /** RegularExpression Id. */
  int False = 41;
  /** RegularExpression Id. */
  int Proc = 42;
  /** RegularExpression Id. */
  int If = 43;
  /** RegularExpression Id. */
  int Then = 44;
  /** RegularExpression Id. */
  int Else = 45;
  /** RegularExpression Id. */
  int While = 46;
  /** RegularExpression Id. */
  int Do = 47;
  /** RegularExpression Id. */
  int Seq = 48;
  /** RegularExpression Id. */
  int Begin = 49;
  /** RegularExpression Id. */
  int End = 50;
  /** RegularExpression Id. */
  int Record = 51;
  /** RegularExpression Id. */
  int Array = 52;
  /** RegularExpression Id. */
  int Of = 53;
  /** RegularExpression Id. */
  int New = 54;
  /** RegularExpression Id. */
  int Delete = 55;
  /** RegularExpression Id. */
  int Read = 56;
  /** RegularExpression Id. */
  int Write = 57;
  /** RegularExpression Id. */
  int Nl = 58;
  /** RegularExpression Id. */
  int Var = 59;
  /** RegularExpression Id. */
  int Type = 60;
  /** RegularExpression Id. */
  int Separadores = 61;
  /** RegularExpression Id. */
  int nombre = 62;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<Letra>",
    "<Dig>",
    "<DigPos>",
    "<PEntera>",
    "<PDecimal>",
    "<PExp>",
    "<Id>",
    "<LEntero>",
    "<LReal>",
    "<LCadena>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"^\"",
    "\",\"",
    "\":\"",
    "<Int>",
    "<Real>",
    "<Bool>",
    "<String>",
    "<And>",
    "<Or>",
    "<Not>",
    "<Null>",
    "<True>",
    "<False>",
    "<Proc>",
    "<If>",
    "<Then>",
    "<Else>",
    "<While>",
    "<Do>",
    "<Seq>",
    "<Begin>",
    "<End>",
    "<Record>",
    "<Array>",
    "<Of>",
    "<New>",
    "<Delete>",
    "<Read>",
    "<Write>",
    "<Nl>",
    "<Var>",
    "<Type>",
    "<Separadores>",
    "\"@ ([^\\n])*\"",
  };

}
