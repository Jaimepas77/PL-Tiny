options  {
  STATIC=false;
}  
PARSER_BEGIN(ConstructorAST)
package implementacion.c_ast_descendente;

import implementacion.abstractSintax.SintaxisAbstracta;
import implementacion.abstractSintax.SintaxisAbstracta.*;

public class ConstructorAST {
	private SintaxisAbstracta sa = new SintaxisAbstracta();
}

PARSER_END(ConstructorAST)

	//Defs auxiliares
	TOKEN:{<#Letra:["a"-"z","A"-"Z"]>}
	TOKEN:{<#Dig:["0"-"9"]>}
	TOKEN:{<#DigPos:["1"-"9"]>}
	TOKEN:{<#PEntera:("+"|"-")? ("0"|<DigPos> (<Dig>)*)>}
	TOKEN:{<#PDecimal:"." ("0" | (<Dig>)* <DigPos>)>}
	TOKEN:{<#PExp:("e"|"E") <PEntera>>}

    //Cadenas ignorables
	SKIP:{<["\t", " ", "\b", "\r", "\n"]>}//Separadores
	SKIP:{<"@" (~["\n", "\r"])*>}//Comentarios

	//Clases léxicas
	TOKEN:{<Suma: "+">}
	TOKEN:{<Resta: "-">}
	TOKEN:{<Multiplica: "*">}
	TOKEN:{<Divide: "/">}
	TOKEN:{<Modulo: "%">}
	TOKEN:{<BLT: "<">}
	TOKEN:{<BGT: ">">}
	TOKEN:{<BLE: "<=">}
	TOKEN:{<BGE: ">=">}
	TOKEN:{<BEQ: "==">}
	TOKEN:{<BNE: "!=">}
	TOKEN:{<PApertura: "(">}
	TOKEN:{<PCierre: ")">}
	TOKEN:{<PuntoComa: ";">}
	TOKEN:{<Igual: "=">}
	TOKEN:{<CApertura: "[">}
	TOKEN:{<CCierre: "]">}
	TOKEN:{<Punto: ".">}
	TOKEN:{<Circunflejo: "^">}
	TOKEN:{<Coma: ",">}
	TOKEN:{<DosPuntos: ":">}
	
	////Palabras reservadas
	TOKEN:{<Int: ("I"|"i")("N"|"n")("T"|"t")>}
	TOKEN:{<Real: ("R"|"r")("E"|"e")("A"|"a")("L"|"l")>}
	TOKEN:{<Bool: ("B"|"b")("O"|"o")("O"|"o")("L"|"l")>}
	TOKEN:{<String: ("S"|"s")("T"|"t")("R"|"r")("I"|"i")("N"|"n")("G"|"g")>}
	TOKEN:{<And: ("A"|"a")("N"|"n")("D"|"d")>}
	TOKEN:{<Or: ("O"|"o")("R"|"r")>}
	TOKEN:{<Not: ("N"|"n")("O"|"o")("T"|"t")>}
	TOKEN:{<Null: ("N"|"n")("U"|"u")("L"|"l")("L"|"l")>}
	TOKEN:{<True: ("T"|"t")("R"|"r")("U"|"u")("E"|"e")>}
	TOKEN:{<False: ("F"|"f")("A"|"a")("L"|"l")("S"|"s")("E"|"e")>}
	TOKEN:{<Proc: ("P"|"p")("R"|"r")("O"|"o")("C"|"c")>}
	TOKEN:{<If: ("I"|"i")("F"|"f")>}
	TOKEN:{<Then: ("T"|"t")("H"|"h")("E"|"e")("N"|"n")>}
	TOKEN:{<Else: ("E"|"e")("L"|"l")("S"|"s")("E"|"e")>}
	TOKEN:{<While: ("W"|"w")("H"|"h")("I"|"i")("L"|"l")("E"|"e")>}
	TOKEN:{<Do: ("D"|"d")("O"|"o")>}
	TOKEN:{<Seq: ("S"|"s")("E"|"e")("Q"|"q")>}
	TOKEN:{<Begin: ("B"|"b")("E"|"e")("G"|"g")("I"|"i")("N"|"n")>}
	TOKEN:{<End: ("E"|"e")("N"|"n")("D"|"d")>}
	TOKEN:{<Record: ("R"|"r")("E"|"e")("C"|"c")("O"|"o")("R"|"r")("D"|"d")>}
	TOKEN:{<Array: ("A"|"a")("R"|"r")("R"|"r")("A"|"a")("Y"|"y")>}
	TOKEN:{<Of: ("O"|"o")("F"|"f")>}
	TOKEN:{<New: ("N"|"n")("E"|"e")("W"|"w")>}
	TOKEN:{<Delete: ("D"|"d")("E"|"e")("L"|"l")("E"|"e")("T"|"t")("E"|"e")>}
	TOKEN:{<Read: ("R"|"r")("E"|"e")("A"|"a")("D"|"d")>}
	TOKEN:{<Write: ("W"|"w")("R"|"r")("I"|"i")("T"|"t")("E"|"e")>}
	TOKEN:{<Nl: ("N"|"n")("L"|"l")>}
	TOKEN:{<Var: ("V"|"v")("A"|"a")("R"|"r")>}
	TOKEN:{<Type: ("T"|"t")("Y"|"y")("P"|"p")("E"|"e")>}

	TOKEN:{<Id: <Letra> (<Letra> | <Dig> | "_")*>}
	TOKEN:{<LEntero: <PEntera>>}
	TOKEN:{<LReal: <PEntera> (<PDecimal> | <PExp> | <PDecimal> <PExp>)>}
	TOKEN:{<LCadena: "'"(~["\b", "\n", "\r"])*"'">}

	//Sintaxis
	Prog Init() :
	{Prog prog;}
	{
		prog=Prog() <EOF> 
		{return prog;}
    }
    
	Prog Prog() :
    {LDecs sDecs; LIns sIns;}
    {
        sDecs=SDecs() sIns=SIns() <Punto>
        {return sa.cProg_(sDecs, sIns);}
    }
    
	LDecs SDecs() :
    {LDecs rSDecs;}
    {
        rSDecs=RSDecs(sa.cSin_Decs())
        {return rSDecs;}
    }
    
	LDecs RSDecs(LDecs h) :
    {Dec decT; LDecs rSDecs;}
    {
        decT=DecT() rSDecs=RSDecs(sa.cMuchas_Decs(h, decT))
        {return rSDecs;} | 
        {return h;}
    }
    
	Dec DecT() :
    {Dec dec;}
    {
        dec=Dec() <PuntoComa>
        {return dec;}
    }
    
    Dec Dec() :
    {Dec dec;}
    {
        dec=DecVar()
        {return dec;} |
        dec=DecTipo()
        {return dec;} |
        dec=DecProc()
        {return dec;}
    }
    
    Dec DecVar() :
    {Tipo tipo; Token t;}
    {
        <Var> t=<Id> <DosPuntos> tipo=Tipo()
        {return sa.cDec_Var(t.image, tipo);}
    }
    
    Dec DecTipo() :
    {Tipo tipo; Token t;}
    {
        <Type> t=<Id> <DosPuntos> tipo=Tipo()
        {return sa.cDec_Tipo(t.image, tipo);}
    }
    
    Dec DecProc() :
    {LParams params; LDecs sDecs; LIns sIns; Token t;}
    {
        <Proc> t=<Id> params=ParamsF() sDecs=SDecs() sIns=SIns()
        {return sa.cDec_Proc(t.image, params, sDecs, sIns);}
    }

    //Tipos
    Tipo Tipo() :
    {Tipo tipo; Campos campos; Token t;}
    {
        <Int>
        {return sa.cInt_();} |
        <Real>
        {return sa.cReal_();} |
        <Bool>
        {return sa.cBool_();} |
        <String>
        {return sa.cString_();} |
        t=<Id>
        {return sa.cRef_(t.image);} |
        <Array> <CApertura> t=<LEntero> <CCierre> <Of> tipo=Tipo()
        {return sa.cArray_(t.image, tipo);} |
        <Record> campos=Campos() <End>
        {return sa.cRecord_(campos);} |
        <Circunflejo> tipo=Tipo()
        {return sa.cPuntero_(tipo);}
    }

    Campos Campos() :
    {Campo campoT; Campos rCampos;}
    {
        campoT=CampoT() rCampos=RCampos(sa.cUn_Campo(campoT))
        {return rCampos;}
    }
    
    Campos RCampos(Campos h) :
    {Campo campoT; Campos rCampos;}
    {
        campoT=CampoT() rCampos=RCampos(sa.cMuchos_Campos(h, campoT))
        {return rCampos;} |
        //ɛ
        {return h;}
    }
    
    Campo CampoT() :
    {Tipo tipo; Token t;}
    {
        t=<Id> <DosPuntos> tipo=Tipo() <PuntoComa>
        {return sa.cCampo(t.image, tipo);}
    }
    
    LParams ParamsF() :
    {LParams lParams;}
    {
        <PApertura> lParams=LParams() <PCierre>
        {return lParams;}
    }
    
    LParams LParams() :
    {LParams lParams;}
    {
        lParams=LParamsAux()
        {return lParams;} |
        //ɛ
        {return sa.cSin_Params();}
    }
    
    LParams LParamsAux() :
    {Param paramF; LParams rLParams;}
    {
        paramF=ParamF() rLParams=RLParamsAux(sa.cUn_Param(paramF))
        {return rLParams;}
    }
    
    LParams RLParamsAux(LParams h) :
    {Param paramF; LParams rLParams;}
    {
        <Coma> paramF=ParamF() rLParams=RLParamsAux(sa.cMuchos_Params(h, paramF))
        {return rLParams;} |
        //ɛ
        {return h;}
    }
    
    Param ParamF() :
    {Param param;}
    {
        param=ParamRef()
        {return param;} |
        param=ParamVal()
        {return param;}
    }
    
    Param ParamRef() :
    {Tipo tipo; Token t;}
    {
        <Var> t=<Id> <DosPuntos> tipo=Tipo()
        {return sa.cParam_Ref(t.image, tipo);}
    }
    
    Param ParamVal() :
    {Tipo tipo; Token t;}
    {
        t=<Id> <DosPuntos> tipo=Tipo()
        {return sa.cParam_Val(t.image, tipo);}
    }
    
    //Instrucciones
    LIns SIns() :
    {LIns lIns;}
    {
        <Begin> lIns=LIns() <End>
        {return lIns;}
    }
    
    LIns LIns() :
    {LIns rLIns;}
    {
        rLIns=RLIns(sa.cSin_Ins())
        {return rLIns;}
    }
    
    LIns RLIns(LIns h) :
    {Ins ins; LIns rLIns;}
    {
        ins=Ins() rLIns=RLIns(sa.cMuchas_Ins(h, ins))
        {return rLIns;} |
        //ɛ
        {return h;}
    }
    
    Ins Ins() :
    {Ins ins;}
    {
        ins=IAltp()
        {return ins;} |
        ins=IAlt()
        {return ins;} |
        ins=IWhile()
        {return ins;} |
        ins=IRead()
        {return ins;} |
        ins=IWrite()
        {return ins;} |
        ins=INl()
        {return ins;} |
        ins=INew()
        {return ins;} |
        ins=IDelete()
        {return ins;} |
        ins=IComp()
        {return ins;}
    }
    
    Ins IAltp() :
    {E e; Ins rIAltp;}
    {
        e=E() rIAltp=RIAltp(e)
        {return rIAltp;}
    }
    
    Ins RIAltp(E h) :
    {E e; LExp lExp;}
    {
        <Igual> e=E() <PuntoComa>//Asignación
        {return sa.cAsignacion_(h, e);} |
        lExp=ParamsR()//CallProc
        {return sa.cCall_Proc(h, lExp);}
    }
    
    Ins IAlt() :
    {E e; LIns lIns; Ins ins;}
    {
        <If> e=E() <Then> lIns=LIns() ins=RIAlt(e, lIns)
        {return ins;}
    }
    
    Ins RIAlt(E eh, LIns lh) :
    {LIns lIns;}
    {
        <Else> lIns=LIns() <End> TO()
        {return sa.cIf_Then_Else(eh, lh, lIns);} |
        <End> TO()
        {return sa.cIf_Then(eh, lh);}
    }
    
    Ins IWhile() :
    {E e; LIns lIns;}
    {
        <While> e=E() <Do> lIns=LIns() <End> TO()
        {return sa.cWhile_(e, lIns);}
    }
    
    Ins IRead() :
    {E e;}
    {
        <Read> e=E() <PuntoComa>
        {return sa.cRead_(e);}
    }
    
    Ins IWrite() :
    {E e;}
    {
        <Write> e=E() <PuntoComa>
        {return sa.cWrite_(e);}
    }
    
    Ins INl() :
    {}
    {
        <Nl> <PuntoComa>
        {return sa.cNl_();}
    }
    
    Ins INew() :
    {E e;}
    {
        <New> e=E() <PuntoComa>
        {return sa.cNew_(e);}
    }
    
    Ins IDelete() :
    {E e;}
    {
        <Delete> e=E() <PuntoComa>
        {return sa.cDelete_(e);}
    }
    
    LExp ParamsR() :
    {LExp lExp;}
    {
        <PApertura> lExp=LExp() <PCierre> <PuntoComa>
        {return lExp;}
    }
    
    Ins IComp() :
    {LDecs lDecs; LIns lIns;}
    {
        <Seq> lDecs=SDecs() lIns=SIns() TO()
        {return sa.cIns_Compuesta(lDecs, lIns);}
    }
    
    void TO() :
    {}
    {
        <PuntoComa>
        {} |
        //ɛ
        {}
    }
    
    LExp LExp() :
    {LExp lExp;}
    {
        lExp=LExpAux()
        {return lExp;} |
        //ɛ
        {return sa.cSin_Expr();}
    }
    
    LExp LExpAux() :
    {E e; LExp lExp;}
    {
        e=E() lExp=RLExpAux(sa.cUna_Expr(e))
        {return lExp;}
    }
    
    LExp RLExpAux(LExp h) :
    {E e; LExp lExp;}
    {
        <Coma> e=E() lExp=RLExpAux(sa.cMuchas_Expr(h, e))
        {return lExp;} |
        //ɛ
        {return h;}
    }
    
    E E() :
    {E e; E re;}
    {
        e=E1() re=RE(e)
        {return re;}
    }
    
    E RE(E h) :
    {E e; String op;}
    {
        op=OpRel() e=E1()
        {return sa.cExpBin(h, op, e);} |
        //ɛ
        {return h;}
    }
    
    E E1() :
    {E e2; E rE1; E rE1p;}
    {
        e2=E2() rE1=RE1(e2) rE1p=RE1p(rE1)
        {return rE1p;}
    }
    
    E RE1p(E h) :
    {E e; E rE1p;}
    {
        <Resta> e=E2() rE1p=RE1p(sa.cResta(h, e))
        {return rE1p;} |
        //ɛ
        {return h;}
    }
    
    E RE1(E h) :
    {E e;}
    {
        <Suma> e=E2()
        {return sa.cSuma(h, e);} |
        //ɛ
        {return h;}
    }
    
    E E2() :
    {E e; E rE2;}
    {
        e=E3() rE2=RE2(e)
        {return rE2;}
    }
    
    E RE2(E h) :
    {E e;}
    {
        <And> e=E3()
        {return sa.cAnd(h, e);} |
        <Or> e=E2()
        {return sa.cOr(h, e);} |
        //ɛ
        {return h;}
    }
    
    E E3() :
    {E e; E rE3;}
    {
        e=E4() rE3=RE3(e)
        {return rE3;}
    }
    
    E RE3(E h) :
    {E e; String op; E rE3;}
    {
        op=Op3() e=E4() rE3=RE3(sa.cExpBin(h, op, e))
        {return rE3;} |
        //ɛ
        {return h;}
    }
    
    E E4() :
    {String op; E e;}
    {
        op=Op4() e=E4()
        {return sa.cExpUnPref(op, e);} |
        e=E5()
        {return e;}
    }
    
    E E5() :
    {E e; E rE5;}
    {
        e=EBasic() rE5=RE5(e)
        {return rE5;}
    }
    
    E RE5(E h) :
    {E e1; Token t; E e2;}
    {
        <CApertura> e1=E() <CCierre> e2=RE5(sa.cIndex(h, e1))
        {return e2;} |
        <Punto> t=<Id> e2=RE5(sa.cAccess(h, t.image))
        {return e2;} |
        <Circunflejo> e2=RE5(sa.cIndir(h))
        {return e2;} | 
        //ɛ
        {return h;}
    }
    
    E EBasic() :
    {E e; Token t;}
    {
        t=<LEntero>
        {return sa.cInt(t.image);} |
        t=<LReal>
        {return sa.cReal(t.image);} |
        <True>
        {return sa.cTrue();} |
        <False>
        {return sa.cFalse();} |
        t=<LCadena>
        {return sa.cCadena(t.image);} |
        t=<Id>
        {return sa.cId(t.image);} |
        <Null>
        {return sa.cNull();} |
        <PApertura> e=E() <PCierre>
        {return e;}
    }
    
    String OpRel() :
    {}
    {
        <BLT>
        {return "<";} |
        <BGT>
        {return ">";} |
        <BLE>
        {return "<=";} |
        <BGE>
        {return ">=";} |
        <BNE>
        {return "!=";} |
        <BEQ>
        {return "==";}
    }
    
    String Op3() :
    {}
    {
        <Multiplica>
        {return "*";} |
        <Divide>
        {return "/";} |
        <Modulo>
        {return "%";}
    }
    
    String Op4() :
    {}
    {
        <Resta>
        {return "-";} |
        <Not>
        {return "not";}
    }


    
